1.Git
2.git config --global user.name dharanijashu
3.git config --global user.email dharanir.sse@saveetha.com
4.git clone https://github.com/dharanijashu/Fengalrepo.git
cd Fengalrepo //repo in local syste
6.git add . //Files in staging area only
git commit -m "No changes
\Users\91994\Fengalrepo>git checkout
git checkout -b pythonfiles
\Users\91994\Fengalrepo>git push origin pythonfiles

C:\Users\91994\Fengalrepo>git status

docker build -t app .
docker images
docker run app
docker logi -u ....
....
docker login
docker tag app m/,,m
docker push mothis....
docker pull....
docker run m....
FROM python:3.9-slim 
WORKDIR /app 
COPY . /app 
CMD ["python", "app.p



def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

def multiply(a, b):
    return a * b

def divide(a, b):
    if b == 0:
        raise ValueError("Cannot divide by zero!")
    return a / b

def calculator():
    while True:
        print("\nSimple Calculator")
        print("1. Add\n2. Subtract\n3. Multiply\n4. Divide\n5. Exit")
        try:
            choice = int(input("Enter choice (1/2/3/4/5): "))
            if choice == 5:
                print("Exiting the calculator. Goodbye!")
                break

            a = float(input("Enter first number: "))
            b = float(input("Enter second number: "))

            if choice == 1:
                print(f"Result: {add(a, b)}")
            elif choice == 2:
                print(f"Result: {subtract(a, b)}")
            elif choice == 3:
                print(f"Result: {multiply(a, b)}")
            elif choice == 4:
                print(f"Result: {divide(a, b)}")
            else:
                print("Invalid choice! Please select a valid option.")
        except ValueError as e:
            print(f"Error: {e}. Please enter valid inputs.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    calculator()

dockerfile
FROM python:3.8-slim
WORKDIR /docdir
COPY . .
RUN pip install pytest
CMD ["python", "calc.py"]



Test.py
import pytest
from unittest.mock import patch
from calc import add, subtract, multiply, divide, calculator

def test_add():
    assert add(5, 3) == 8
    assert add(-1, -1) == -2
    assert add(0, 0) == 0

def test_subtract():
    assert subtract(10, 5) == 5
    assert subtract(-1, 1) == -2
    assert subtract(0, 0) == 0

def test_multiply():
    assert multiply(4, 5) == 20
    assert multiply(-2, 3) == -6
    assert multiply(0, 10) == 0

def test_divide():
    assert divide(10, 2) == 5
    assert divide(-6, 3) == -2
    with pytest.raises(ValueError, match="Cannot divide by zero!"):
        divide(10, 0)

@patch("builtins.input", side_effect=["1", "10", "5", "5"])  # Add option
@patch("builtins.print")
def test_calculator_add(mock_print, mock_input):
    calculator()
    mock_print.assert_any_call("Result: 15.0")

@patch("builtins.input", side_effect=["2", "15", "5", "5"])  # Subtract option
@patch("builtins.print")
def test_calculator_subtract(mock_print, mock_input):
    calculator()
    mock_print.assert_any_call("Result: 10.0")

@patch("builtins.input", side_effect=["3", "3", "4", "5"])  # Multiply option
@patch("builtins.print")
def test_calculator_multiply(mock_print, mock_input):
    calculator()
    mock_print.assert_any_call("Result: 12.0")

@patch("builtins.input", side_effect=["4", "20", "4", "5"])  # Divide option
@patch("builtins.print")
def test_calculator_divide(mock_print, mock_input):
    calculator()
    mock_print.assert_any_call("Result: 5.0")

@patch("builtins.input", side_effect=["4", "10", "0", "5"])  # Divide by zero
@patch("builtins.print")
def test_calculator_divide_by_zero(mock_print, mock_input):
    calculator()
    mock_print.assert_any_call("Error: Cannot divide by zero!. Please enter valid inputs.")

@patch("builtins.input", side_effect=["5"])  # Exit option
@patch("builtins.print")
def test_calculator_exit(mock_print, mock_input):
    calculator()
    mock_print.assert_any_call("Exiting the calculator. Goodbye!")
